language: cpp

git:
  depth: 1

notifications:
  email: false
  
matrix:
  matrix:
  include:
    - os: osx
      osx_image: xcode10.1
      compiler: clang
    - os: linux 
      dist: trusty
      group: latest
      sudo: required
      services: docker
      env: TARGET_SYSTEM=linux-x64 BUILD_FOLDER=LinuxMakefile TARGET_ARCH=x86_64
    - os: linux
      dist: trusty
      group: latest
      sudo: required
      services: docker
      env: TARGET_SYSTEM=raspberry BUILD_FOLDER=Raspberry TARGET_ARCH=armhf

before_install:
- |
  if [ " -n "$TRAVIS_TAG]; then 
    if [ "$TRAVIS_TAG" == *b* ]; then 
      echo "Beta version, set config to Release"; 
      export MAKECONF=Release
      export SUFFIX=$TRAVIS_TAG
    else 
      echo "Stable version, set config to Release"; 
      export MAKECONF=Release
      export SUFFIX=$TRAVIS_TAG
    fi
  else 
    echo "No tag set, set config to Debug / bleeding"; 
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      export MAKECONF=Debug
    else
      export MAKECONF=Release
    fi
    export SUFFIX=bleedingedge
  fi;

  echo "Suffix : $SUFFIX"
  echo "Target system : $TARGET_SYSTEM"

  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    cd ..
    pwd
    docker run -d --name ubuntu --privileged -v $(pwd):/benkuper ubuntu:latest tail -f /dev/null
    docker ps
  else
    gem install xcpretty
    gem install xcpretty-travis-formatter
    pwd
    ls -d */
    cd /Users/travis
    git clone --depth=1 --branch=develop-local https://github.com/benkuper/JUCE.git JUCE
    cd /Users/travis/build/benkuper
    mkdir "JUCE Modules"
    cd "JUCE Modules"
    git clone --depth=1 --branch=master https://github.com/benkuper/juce_organicui.git juce_organicui
    cd ..
    pwd
    ls -d */
    curl -L -o Packages.dmg 'http://s.sudre.free.fr/Software/files/Packages.dmg'
    hdiutil mount Packages.dmg
    sudo installer -pkg /Volumes/Packages\ 1.2.5/Install\ Packages.pkg -target /
    hdiutil detach /Volumes/Packages\ 1.2.5/
    cd /Users/travis/build/benkuper
  fi
install:
- |
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    echo "Linux machine"
    if [ $TARGET_SYSTEM == "raspberry" ]; then
      docker exec -t ubuntu bash -c "export DEBIAN_FRONTEND=noninteractive;
      uname -a;
      apt-get install -qq software-properties-common
      add-apt-repository ppa:webkit-team/ppa -y;
      add-apt-repository -y ppa:ubuntu-toolchain-r/test;
      apt-get update -qq --fix-missing;
      apt-get update -qq;

      echo 'Installing Raspberry cross-compile toolchain...';
      apt install -qq git curl wget zip unzip libfuse2;
      
      echo 'deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports trusty main universe' >> /etc/apt/sources.list;
      echo 'deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports trusty-updates main universe' >> /etc/apt/sources.list;
      dpkg --add-architecture armhf;
      
      apt update -qq;
      apt upgrade -qq;

      apt -y --assume-yes install libc6-dev:armhf;
      apt -y --assume-yes install libc6-dev:armhf;
      apt -y --assume-yes install libfreetype6-dev:armhf libx11-dev:armhf libxinerama-dev:armhf libxrandr-dev:armhf libxcursor-dev:armhf ;mesa-common-dev:armhf libasound2-dev:armhf freeglut3-dev:armhf libxcomposite-dev:armhf libjack-dev:armhf libcurl4-openssl-dev:armhf ladspa-sdk:armhf;
      apt -y --assume-yes install libglib2.0-dev:armhf;
      apt -y --assume-yes install libgdk-pixbuf2.0-dev:armhf;
      apt -y --assume-yes install libgtk-3-dev:armhf libwebkit2gtk-4.0-dev:armhf;
      apt -y --assume-yes install libbluetooth3:armhf;
      apt -y --assume-yes install libbluetooth-dev:armhf;
      apt -y --assume-yes install g++-arm-linux-gnueabihf;
      
      export CXX=arm-linux-gnueabihf-g++;
      export CC=arm-linux-gnueabihf-gcc;
      export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig;
      echo $CC;
      echo $CXX;
      cd ~;
      pwd;
      git clone --depth=1 --branch=develop-local https://github.com/benkuper/JUCE.git JUCE;
      cd /benkuper;
      mkdir 'JUCE Modules';
      cd 'JUCE Modules';
      git clone --depth=1 --branch=master https://github.com/benkuper/juce_organicui.git juce_organicui"

    else

      docker exec -t ubuntu bash -c "export DEBIAN_FRONTEND=noninteractive;
      uname -a;
      apt-get install -qq software-properties-common
      add-apt-repository ppa:webkit-team/ppa -y;
      add-apt-repository -y ppa:ubuntu-toolchain-r/test;
      apt-get update --fix-missing;
      apt-get update -qq;
      echo 'Installing GCC...';
      apt-get install -y g++-7 gcc-7;
      gcc -v;
      update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 90;
      update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 90;
      export CC=/usr/bin/gcc;
      export CXX=/usr/bin/g++;
      
      apt-get install -qq git libfreetype6-dev libx11-dev libxinerama-dev libxrandr-dev libxcursor-dev libxcomposite-dev mesa-common-dev libasound2-dev freeglut3-dev libcurl4-gnutls-dev+ libasound2-dev libjack-dev libbluetooth-dev libgtk-3-dev libwebkit2gtk-4.0-dev curl wget zip unzip libfuse2;
      
      echo $CC;
      echo $CXX;
      echo 'GCC Version :';
      gcc -v;
      cd ~;
      pwd;
      git clone --depth=1 --branch=develop-local https://github.com/benkuper/JUCE.git JUCE;
      cd /benkuper;
      mkdir 'JUCE Modules';
      cd 'JUCE Modules';
      git clone --depth=1 --branch=master https://github.com/benkuper/juce_organicui.git juce_organicui"
    fi
  fi

script:
- |
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    docker exec -t ubuntu bash -c "echo 'Building Chataigne for $TARGET_SYSTEM...';
    cd /benkuper/Chataigne/Builds/$BUILD_FOLDER;
    make -j 8 CONFIG=$MAKECONF"
  else
    xcodebuild -project Chataigne/Builds/MacOSX/Chataigne.xcodeproj -configuration $MAKECONF -jobs 8 -verbose | xcpretty -f `xcpretty-travis-formatter`
  fi

after_success:
- |
  if [ "$TRAVIS_OS_NAME" == "linux" ]; then
    docker exec -t ubuntu bash -c "cd /benkuper/Chataigne/Builds/$BUILD_FOLDER;
    pwd
    echo 'Downloading AppImageTool...';
    if [ $TARGET_SYSTEM == "raspberry" ]; then
      export APPIMAGE_FILENAME=appimagetool-$TARGET_ARCH.AppImage
      export APPIMAGE_URL=https://github.com/AppImage/AppImageKit/releases/download/continuous/$APPIMAGE_FILENAME
    else
      export APPIMAGE_FILENAME=appimagetool-$TARGET_ARCH.AppImage
      export APPIMAGE_URL=https://github.com/AppImage/AppImageKit/releases/download/continuous/$APPIMAGE_FILENAME
    fi

    wget "$APPIMAGE_URL";
    chmod a+x $APPIMAGE_FILENAME;
    echo 'Packaging AppImage...';
    mkdir Chataigne.AppDir/usr/bin/;
    cp build/Chataigne Chataigne.AppDir/usr/bin/;
    ./$APPIMAGE_FILENAME Chataigne.AppDir Chataigne-$TARGET_SYSTEM-$SUFFIX.AppImage;
    echo 'Uploading $SUFFIX ...';
    curl -X POST -F 'appFile=@Chataigne-$TARGET_SYSTEM-$SUFFIX.AppImage' -F 'pass=$UPLOAD_PASS' $UPLOAD_URL;"
  else
    cd /Users/travis/build/benkuper/Chataigne/Package
    ls
    packagesbuild Chataigne.pkgproj
    mv Chataigne.pkg Chataigne-osx-$SUFFIX.pkg
    curl -T Chataigne-osx-$SUFFIX.pkg -u $FTP_USER:$FTP_PASSWORD --insecure ftp://ftp.kuperberg.fr/
  fi
